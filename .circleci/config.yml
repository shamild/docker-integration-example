version: 2

# Snippets
.maven-default: &maven-default
  docker:
    - image: circleci/openjdk:8-jdk-browsers
  environment:
    MAVEN_OPTS: -Xmx3200m
.deploy-default: &deploy-default

.persist-workspace: &persist-workspace
  persist_to_workspace:
    root: ~/
    paths:
      - project
      - .m2
.attach-workspace: &attach-workspace
  attach_workspace:
    at: ~/
.requires-compile: &requires-compile
  requires:
    - compile
.publish: &publish
  <<: *maven-default
  steps:
    - *attach-workspace
    - setup_remote_docker
    - run:
        name: Configure Docker
        command: |
          docker --version
          docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" quay.io
    - deploy:
        name: Push version tag
        command: |
          if [ "$CIRCLE_BRANCH" == "master" ]; then
            tag=$(cat VERSION)
          else
            tag=$(git rev-parse HEAD)
          fi
          mvn dockerfile:build dockerfile:push "-Ddockerfile.tag=$tag"
    - deploy:
        name: Push branch tag
        command: |
          if [ -n "$DOCKER_BRANCH_TAG" ]; then
            mvn dockerfile:build dockerfile:push "-Ddockerfile.tag=$DOCKER_BRANCH_TAG"
          fi
.deploy: &deploy
  docker:
    - image: alpine
  steps:
    - checkout
    - run:
        name: Install prerequisites
        command: |
          apk add --no-cache make curl git
    - deploy:
        name: Trigger deployment
        command: make "$CIRCLE_JOB"

jobs:
  compile:
    <<: *maven-default
    steps:
      - checkout
      - restore_cache:
          keys:
          - docker-integration-example-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - docker-integration-example-
      - run:
          name: Configure Maven
          command: |
            mkdir -p ~/.m2
            mv .circleci/settings.xml ~/.m2
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: docker-integration-example-{{ checksum "pom.xml" }}
      - run:
          name: Set version
          command: |
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              echo "$(cat VERSION)-SNAPSHOT" > VERSION
            fi
            mvn versions:set "-DnewVersion=$(cat VERSION)"
      - run: mvn clean compile test-compile
      - *persist-workspace
  test:
    machine:
      image: circleci/classic:201711-01
    steps:
      - *attach-workspace
      - run:
          name: run tests
          #Machine image uses oracle jvm by default, tells mvn to use installed open-jdk
          command: |
            export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
            mvn test -Dmaven.compile.skip=true;
      - store_test_results:
          path: target/surefire-reports
  integration-test:
    machine:
      image: circleci/classic:201711-01
    steps:
      - *attach-workspace
      - run:
          name: run tests
          #Machine image uses oracle jvm by default, tells mvn to use installed open-jdk
          command: |
            export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
            mvn verify -Dmaven.compile.skip=true;
      - store_test_results:
          path: target/surefire-reports
  package:
    <<: *maven-default
    steps:
      - *attach-workspace
      - run: mvn package -Dmaven.test.skip=true
      - *persist-workspace
  publish-develop:
    <<: *publish
    environment:
      DOCKER_BRANCH_TAG: develop
  publish-master:
    <<: *publish
    environment:
      DOCKER_BRANCH_TAG: latest
  deploy-dev: *deploy
  deploy-staging: *deploy
  display-diff-from-master: &display-diff-from-master
    docker:
      - image: alpine
    steps:
      - checkout
      - run: 
          name: Install prerequisites
          command: |
            apk add --no-cache git less
      - run: &compare-with-master
          name: compare with master
          command: |
            echo compare master with origin/${CIRCLE_BRANCH}
            if [ -z "$(git diff origin/master..origin/${CIRCLE_BRANCH})" ]
            then
              echo
              echo No changes on ${CIRCLE_BRANCH} since last release.
              exit 0
            else
              echo New commits in develop since last release:
              git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit origin/master..origin/${CIRCLE_BRANCH}
            fi
  release: &release
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install prerequisites
          command: |
            apk add --no-cache git less
      - run: *compare-with-master
      - run:
          name: configure git user
          command: |
            git config --global user.email "you@example.com"
            git config --global user.name "$CIRCLE_USERNAME"       
      - run:
          name: Create release/v tag from develop
          command: |
            # Current version, format is x.x.x, e.g. 0.1.5
            CURRENT_VERSION=$(cat VERSION)

            MAJOR=$(echo ${CURRENT_VERSION} | cut -d \. -f 1)
            MINOR=$(echo ${CURRENT_VERSION} | cut -d \. -f 2)
            PATCH=$(echo ${CURRENT_VERSION} | cut -d \. -f 3)

            case "$RELEASE_TYPE" in
            "major")
                MAJOR=$((MAJOR+1))
                MINOR=0
                PATCH=0
                ;;
            "minor")
                MINOR=$((MINOR+1))
                PATCH=0
                ;;
            *)
                PATCH=$((PATCH+1))
                ;;
            esac

            # Increment minor version number
            NEXT_VERSION=${MAJOR}.${MINOR}.${PATCH}
            echo "Next version $NEXT_VERSION"
            git checkout -b release/v${NEXT_VERSION}

            #Â Bump version number
            echo ${NEXT_VERSION} > VERSION
            git add VERSION
            git commit -m "Release v${NEXT_VERSION}. Bump version"

            # Create the tag
            notes=`git log v${CURRENT_VERSION}..HEAD --pretty='format:%B' | sort | uniq | grep "^\s*\[\|\s*\*\s*\["| sed 's/\* \[/[/g'`
            fnotes=`echo "$notes" | sed -E 's/\[(.*)\]/[\1](https:\/\/shamild.atlassian.net\/browse\/\1)/g'`
            tickets=`echo "$notes" | sed -E 's/\[(.*)\].*/\1/g' | uniq`

            git tag v${NEXT_VERSION} -m "Change log for v${NEXT_VERSION}" -m "$fnotes"

            # Push the release branch
            git push origin release/v${NEXT_VERSION}

            git push --tags
  patch-release:
    <<: *release
    environment:
      RELEASE_TYPE: patch
  minor-release:
    <<: *release
    environment:
      RELEASE_TYPE: minor
  major-release:
    <<: *release
    environment:
      RELEASE_TYPE: major
workflows:
  version: 2
  build-deploy:
    jobs:
      - compile
      - test: *requires-compile
      - integration-test: *requires-compile
      - package: *requires-compile
      - publish-develop:
          requires: &requires-built
            - test
            - integration-test
            - package
          filters:
            branches:
              only:
                - develop
      - deploy-dev:
          requires:
            - publish-develop
      - display-diff-from-master:
          requires:
            - deploy-dev
      - patch-release-approval:
          type: approval
          requires:
            - display-diff-from-master
      - minor-release-approval:
          type: approval
          requires:
            - display-diff-from-master
      - major-release-approval:
          type: approval
          requires:
            - display-diff-from-master
      - patch-release:
          requires:
            - patch-release-approval
      - minor-release:
          requires:
            - minor-release-approval
      - major-release:
          requires:
            - major-release-approval
      - staging-approval:
          type: approval
          requires: *requires-built
          filters:
            branches:
              only: master
      - publish-master:
          requires:
            - staging-approval
      - deploy-staging:
          requires:
            - publish-master
